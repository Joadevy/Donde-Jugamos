// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Necesario para Next Auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text no funcionaria en sqlite, en postgres si
    access_token      String? // @db.Text no funcionaria en sqlite, en postgres si
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text no funcionaria en sqlite, en postgres si
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

// Necesario para Next Auth
model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          String?   @default("customer") // customer | propietary | admin 
    accounts      Account[]
    sessions      Session[]
    registerDate  DateTime  @default(now())
    CBU           String?   @unique
    Alias         String?   @unique
}

// Necesario para Next Auth
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SportCenter { //Establishment
  id Int @id @default(autoincrement())
  name String
  location String 
  postcode String
  phone String
  email String
  description String?
  active Boolean @default(false)
  cancelTimeLimit Int @default(180) // 3 horas
  paymentTimeLimit Int @default(180) // 3 horas
}

model Court { //Field - Cancha
 id Int @id @default(autoincrement())
 capacity Int
 price Decimal
 description String?
}

model Appointment { //Turno
  id Int @id @default(autoincrement())
  date DateTime
  startTime Float
  endTime Float
  active Boolean @default(true)
}

model Reservation {
  id Int @id @default(autoincrement())
  date DateTime
  state String? @default("pendiente") // APROBADA | RECHAZADA |CANCELADA |PENDIENTE
  observation String?
  partialPayment Decimal
  paymentConfirmation Bytes?
  //paymentId int 
}

model Sport {
  id Int @id @default(autoincrement()) 
  name String
  duration Int @default(60) //Minutes 
}

model Day {
  id Int @id @default(autoincrement())
  name String
  firstHalfStartTime Float //Hora inicio primera media jornada
  firstHalfEndTime Float //Hora fin primera media jornada
  secondHalfStartTime Float //Hora inicio segunda media jornada
  secondHalfEndTime Float //Hora fin segunda media jornada
}

model Payment {
  id Int @id @default(autoincrement())
  date DateTime
  mount Decimal
  CBU String? @unique
  reservationId Int
}

//Los enums no estan definidos para SQLite, SI para postgre
// enum ReservationState {
//   APROBADA
//   RECHAZADA
//   CANCELADA
//   PENDIENTE
// }

