// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Necesario para Next Auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text no funcionaria en sqlite, en postgres si
    access_token      String? // @db.Text no funcionaria en sqlite, en postgres si
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text no funcionaria en sqlite, en postgres si
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

// Necesario para Next Auth
model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          String   @default("customer") // customer | propietary | admin 
    accounts      Account[]
    sessions      Session[]
    registerDate  DateTime  @default(now())
    CBU           String?   @unique
    Alias         String?   @unique
    sportcenter   SportCenter[]
    reservations  Reservation[]
}

// Necesario para Next Auth
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SportCenter { //Establishment
  id Int @id @default(autoincrement())
  name String
  address String 
  phone String
  email String
  description String?
  CBU String? @unique
  Alias String? @unique
  active Boolean @default(false)
  state String @default("pending") // pending | approved | rejected | canceled
  cancelTimeLimit Int @default(180) // 3 horas
  paymentTimeLimit Int @default(180) // 3 horas
  courts Court[]
  userId String @unique
  user User @relation(fields: [userId], references: [id])
  cityId Int
  city City @relation(fields: [cityId], references: [id])
  acceptPartialPayment Boolean @default(true)
  partialPaymentPercentage Int @default(30) // Seria el porcentaje de la senia
}

model City {
  id Int @id @default(autoincrement())
  name String
  postCode String @unique
  sportCenters SportCenter[]
}

model Court { //Field - Cancha
 id Int @id @default(autoincrement())
 name String
 capacity Int
 price Float
 description String?
 sportCenterId Int
 sportCenter SportCenter @relation(fields: [sportCenterId], references: [id])
 sportId Int
 sport Sport @relation(fields: [sportId], references: [id])
 appointments Appointment[]
 days Day[]
}

model Appointment { //Turno
  id Int @id @default(autoincrement())
  date DateTime
  startTime Int // Tiempo medido en minutos, rango: [0, 1440] (24 horas son 1440 minutos)
  endTime Int // Tiempo medido en minutos, rango: [0, 1440]
  active Boolean @default(true)
  courtId Int
  court Court @relation(fields: [courtId], references: [id])
  reservations Reservation[]
}

model Reservation {
  id Int @id @default(autoincrement())
  date DateTime  @default(now())
  state String @default("pending") // pending | approved | rejected | canceled
  observation String?
  partialPayment Float?
  paymentConfirmation String?
  appointmentId Int
  appointment Appointment @relation(fields: [appointmentId], references: [id])
  userId String
  user User @relation(fields: [userId], references: [id])
}

model Sport {
  id Int @id @default(autoincrement()) 
  name String
  duration Int @default(60) //Minutes 
  courts Court[]
}

model Day {
  id Int @id @default(autoincrement())
  name String
  firstHalfStartTime Int //Hora inicio primera media jornada
  firstHalfEndTime Int? //Hora fin primera media jornada
  secondHalfStartTime Int? //Hora inicio segunda media jornada
  secondHalfEndTime Int //Hora fin segunda media jornada
  courtId Int
  court Court @relation(fields: [courtId], references: [id])

  @@unique([name,courtId])
}

//Los enums no estan definidos para SQLite, SI para postgre
// enum ReservationState {
//   APROBADA
//   RECHAZADA
//   CANCELADA
//   PENDIENTE
// }

